-support soft newlines (,)
-support a single statement across multiple lines (...)
-indicate whether delimeter is open or close
-comment out comment-related keywords AKA do not add them as lexemes

SEMANTIC TASKS
[X]GIMMEH
[X]Arithmetic
[X]If-Else
[X]Assignment 
[ ]Comparison
[ ]Boolean
[ ]Switch-Case
[ ]Typecast (R, RMAEK, IS NOW A)
[ ]Loops
[X]SMOOSH
[X]Just a literal
[?]VISIBLE (incomplete, support for Boolean and Comparison)

HAI
    I HAS A var ITZ SUM OF BIGGR OF SUM OF 4 AN 2 AN 2 AN DIFF OF 10 AN 7 I HAS A var4
    I HAS A var2
    VISIBLE "NUMS: " var DIFF OF var AN 6
    I HAS A var3
KTHXBYE

if (self.curr_tok[0] == "Default Case Keyword"):
                                    switchList.append(self.curr_tok)
                                    self.advance()
                                    if (self.curr_tok[0] == "NEWLINE"):
                                        switchList.append(self.curr_tok)
                                        self.advance()
                                        
                                        while (1):
                                            if (self.curr_tok[0] == "Conditional Delimiter"):
                                                switchList.append(self.curr_tok)
                                                self.advance()
                                                if (self.curr_tok[0] == "NEWLINE"):
                                                    self.advance()
                                                    break
                                                else:
                                                    self.error = "ERROR: OIC must be alone in its line"
                                                    return self.error
                                            if (self.curr_tok == "END OF TOKENS"):
                                                self.error = "ERROR: WTF? must end with OIC"
                                            switchList.append(self.curr_tok)
                                            self.advance()
                                    else:
                                        self.error = "ERROR: OMGWTF must be alone in its line"

===code that is no longer applicable

            if (self.tok_idx in levelTwoIdx):
                #print(self.tok_idx)
                #print(levelTwoIdx)
                if (self.curr_tok[0] == "Variable Declaration"):
                    nodeContent.append(self.curr_tok)
                    self.advance()
                    if (self.curr_tok[0] == "Variable Identifier"):
                        nodeContent.append(self.curr_tok)
                        self.advance()
                    else:
                        self.error = "ERROR: There must be a Variable Identifier after I HAS A"
                        return self.error
                    
                    #print("x",self.tok_idx)
                    #print(levelTwoIdx)
                    if (self.tok_idx in levelTwoIdx):
                        self.tree.add_child(TreeNode(nodeContent))
                        nodeContent = []
                        continue
                    if (self.curr_tok[0] == "Variable Assignment"):
                        nodeContent.append(self.curr_tok)
                        self.advance()
                        if (self.tok_idx in levelTwoIdx):
                            finishedNode = False
                            continue
                    elif (self.tok_idx not in levelTwoIdx):
                        self.error = "ERROR: Wrong syntax in I HAS A line"
                        return self.error
                elif (self.curr_tok[0] == "Code Delimeter CLOSE"):
                    self.tree.add_child(TreeNode("Code Delimeter CLOSE"))
                    self.advance()
                elif (self.curr_tok[0] == "Arithmetic Operation"):
                    mathList = []
                    while (self.curr_tok[0] in mathRelatedLex):
                        mathList.append(self.curr_tok)
                        self.advance()
                    evalMathList = checkIfValidMathSyntax(mathList)
                    if (isinstance(evalMathList, int)):
                        if (not finishedNode):
                            nodeContent.append("<arithmeticExpression>")
                            self.tree.add_child(TreeNode(nodeContent))
                            self.tree.children[len(self.tree.children)-1].add_child(TreeNode(mathList))
                            nodeContent = []
                        else:
                            nodeContent = evalMathList
                            self.tree.add_child(TreeNode(nodeContent))
                            nodeContent = []
                        continue
                    else:
                        self.error = evalMathList
                        return self.error
                elif (self.curr_tok[0] == "Output Keyword"):
                    visibleNumLex = self.curr_tok[2]
                    nodeContent = []
                    nodeContent.append(self.curr_tok)
                    nodeContent.append("<arguments>")
                    self.tree.add_child(TreeNode(nodeContent))
                    nodeContent = []
                    self.advance()
                    for j in range(0, visibleNumLex):
                        self.tree.children[len(self.tree.children)-1].add_child(TreeNode(self.curr_tok))
                        self.advance()
                    continue
            
            if (self.curr_tok == "END OF TOKENS"):
                break
   
            self.advance()